---
# Assumptions Before beginning
# 1) The LXCs that are being inventoried already exist and already have bind mounts for the media directory to be /usr/lib/ocf/resource.d/heartbeat
# 2) The permissions on said bind mount are functional so the lxc can read/write there for me that looks like the below or use a privledged container
#    This makes it so uid and gid 1000 are maintained externally but the rest are still jailed to uid gid 100k so if the lxc
#    root escapes it is just the undefined user 100,001

# # Map container UIDs 0-999 to host UIDs starting at 100001
# lxc.idmap: u 0 100001 999
# # Map container UID 1000 directly to host UID 1000
# lxc.idmap: u 1000 1000 1
# # Map container UIDs 1001-65535 to host UIDs starting at 101001
# lxc.idmap: u 1001 101001 64535

# # Similarly for GIDs:
# lxc.idmap: g 0 100001 999
# lxc.idmap: g 1000 1000 1
# lxc.idmap: g 1001 101001 64535

# 3) No users other than root have been created in the LXC, the uid and gid 1000 should be reserved for our tdarr user
- name: Install and Maintain Tdarr-Nodes
  hosts: tdarr
  become: true
  vars_files:
    - vault/vault.yaml
  vars:
    ansible_shell_executable: /bin/bash  # Use bash as the default shell
    ansible_ssh_pipelining: true
    tdarr_server_ip: 192.168.0.80
    updater_link: "https://storage.tdarr.io/versions/2.17.01/linux_x64/Tdarr_Updater.zip"
  tasks:
    - name: Configure apt proxy
      ansible.builtin.lineinfile:
        path: /etc/apt/apt.conf.d/00aptproxy
        line: '"http://192.168.0.23:3142";'
        state: present
        create: true
        mode: "0644"

    - name: Install Nala instead of apt
      ansible.builtin.apt:
        name: nala
        state: present
        update_cache: true

    - name: Update nala mirrors
      ansible.builtin.command: nala fetch --auto -y
      changed_when: false

    - name: Install required packages
      ansible.builtin.apt:
        name:
          - jq
          - mkvtoolnix
          - libtesseract-dev
          - handbrake-cli
          - unzip
          - curl
        state: present
        update_cache: true

    - name: Install oh my posh and cli enhancements
      ansible.builtin.include_tasks: tasks/oh-my-posh.yaml

    - name: Upgrade all packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist
        autoremove: true

    - name: Ensure tdarr group exists
      ansible.builtin.group:
        name: mygroup
        gid: 1000
        state: present

    - name: Create tdarr user with a specific UID and primary GID
      ansible.builtin.user:
        name: tdarr
        uid: 1000
        group: mygroup
        create_home: true
        state: present

    - name: Download The Tdarr updater
      ansible.builtin.get_url:
        url: "{{ updater_link }}"
        dest: /tmp/Tdarr_updater.zip
        mode: '0770'

    - name: Ensure tdarr directory exists with proper permissions
      ansible.builtin.file:
        path: /opt/Tdarr
        state: directory
        owner: tdarr
        group: tdarr
        mode: '0770'

    - name: Ensure tdarr config directory exists with proper permissions
      ansible.builtin.file:
        path: /opt/Tdarr/configs
        state: directory
        owner: tdarr
        group: tdarr
        mode: '0770'

    - name: Create Tdarr node config if node flag is true
      ansible.builtin.template:
        src: tdarr-configs/Tdarr_Node_Config.json.j2
        dest: /opt/Tdarr/configs/Tdarr_Node_Config.json
        owner: tdarr
        group: tdarr
        mode: '0770'
      when: tdarr_node | default(false)

    - name: Create Tdarr server config if node flag is true
      ansible.builtin.template:
        src: tdarr-configs/Tdarr_Server_Config.json.j2
        dest: /opt/Tdarr/configs/Tdarr_Server_Config.json
        owner: tdarr
        group: tdarr
        mode: '0770'
      when: tdarr_server | default(false)

    - name: Create Tdarr Updater config
      ansible.builtin.template:
        src: tdarr-configs/Tdarr_Updater_Config.json.j2
        dest: /opt/Tdarr/configs/Tdarr_Updater_Config.json
        owner: tdarr
        group: tdarr
        mode: '0770'

    - name: Extract Tdarr updater
      ansible.builtin.unarchive:
        src: /tmp/Tdarr_updater.zip
        dest: /opt/Tdarr
        remote_src: true

    - name: Set permissions on extracted files
      ansible.builtin.file:
        path: /destination/directory
        owner: tdarr
        group: tdarr
        mode: '0770'
        recurse: true

    - name: Execute updater as tdarr user
      ansible.builtin.command: /opt/Tdarr/Tdarr_Updater
      become: true
      become_user: tdarr
      changed_when: false # script will take care of checking to see if there's a new version

    - name: Copy tdarr-node service to hosts with node flag set
      ansible.builtin.copy:
        src: tdarr-configs/tdarr-node.service.j2
        dest: /etc/systemd/system/
        mode: '0774'
      when: tdarr_node | default(false)

    - name: Copy tdarr-server service to hosts with node flag set
      ansible.builtin.copy:
        src: tdarr-configs/tdarr-server.service.j2
        dest: /etc/systemd/system/
        mode: '0774'
      when: tdarr_server | default(false)

    - name: Enable and start tdarr-node service for nodes with flag set
      ansible.builtin.systemd:
        daemon_reload: true
        name: tdarr-node
        enabled: true
        state: started
      when: tdarr_node | default(false)

    - name: Enable and start tdarr-server service for nodes with flag set
      ansible.builtin.systemd:
        daemon_reload: true
        name: tdarr-server
        enabled: true
        state: started
      when: tdarr_server | default(false)
